AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Career Study Plan application on EC2'

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Description: EC2 instance type
    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
    
  GeminiApiKey:
    Type: String
    Default: ''
    Description: Optional Gemini API key for AI suggestions
    NoEcho: true
    
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Latest Amazon Linux 2023 AMI ID (automatically updated)

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: CareerPlan-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CareerPlan-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CareerPlan-PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CareerPlan-PublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # VPC Endpoints for SSM (optional but recommended for security)
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - ssm:*
            Resource: '*'

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup

  # Security Group for SSM VPC Endpoints
  SSMEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SSM VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
          Description: HTTPS from EC2 instances
      Tags:
        - Key: Name
          Value: CareerPlan-SSM-Endpoints-SG

  # Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Career Study Plan web server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: Node.js application
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
          Description: Frontend server
      Tags:
        - Key: Name
          Value: CareerPlan-SecurityGroup

  # IAM Role for EC2 with SSM Session Manager support
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
      Policies:
        - PolicyName: SSMSessionManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:UpdateInstanceInformation
                  - ssm:SendCommand
                  - ssm:ListCommands
                  - ssm:ListCommandInvocations
                  - ssm:DescribeInstanceInformation
                  - ssm:GetConnectionStatus
                  - ssm:DescribeInstanceAssociationsStatus
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                  - ec2messages:AcknowledgeMessage
                  - ec2messages:DeleteMessage
                  - ec2messages:FailMessage
                  - ec2messages:GetEndpoint
                  - ec2messages:GetMessages
                  - ec2messages:SendReply
                Resource: '*'
      Tags:
        - Key: Name
          Value: CareerPlan-EC2Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e  # Exit on error
          
          # Log all output for debugging
          exec > >(tee /var/log/user-data.log) 2>&1
          
          echo "Starting Amazon Linux 2023 deployment at $(date)"
          
          # Verify Amazon Linux 2023
          echo "Detecting operating system..."
          if [ -f /etc/os-release ]; then
            echo "OS release info:"
            cat /etc/os-release
            
            # Check if this is Amazon Linux 2023
            if grep -q "Amazon Linux 2023" /etc/os-release; then
              echo "Confirmed: Running on Amazon Linux 2023"
            else
              echo "WARNING: This script is optimized for Amazon Linux 2023" >&2
            fi
          fi
          
          # Update system using dnf (AL2023 package manager)
          echo "Updating system packages..."
          dnf update -y
          
          # Install basic packages using dnf (handle curl conflicts)
          echo "Installing basic packages..."
          dnf install -y git tar gzip wget which nginx nodejs npm --allowerasing
          
          # Verify nginx installation
          if command -v nginx &> /dev/null; then
            echo "Nginx installed successfully"
            nginx -v
          else
            echo "ERROR: Nginx installation failed" >&2
            exit 1
          fi
          
          # SSM Agent configuration for AL2023
          echo "Configuring SSM Agent..."
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          systemctl status amazon-ssm-agent --no-pager
          
          # Verify Node.js installation (already installed with packages above)
          echo "Verifying Node.js installation..."
          if command -v node &> /dev/null && command -v npm &> /dev/null; then
            echo "Node.js installed successfully via dnf"
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
          else
            echo "ERROR: Node.js installation failed" >&2
            exit 1
          fi
          
          # Install PM2 for process management
          echo "Installing PM2..."
          npm install -g pm2
          
          # Verify PM2 installation
          if command -v pm2 &> /dev/null; then
            echo "PM2 installed successfully"
            echo "PM2 version: $(pm2 --version)"
          else
            echo "ERROR: PM2 installation failed" >&2
            exit 1
          fi
          
          # Create application directory and clone repository
          echo "Setting up application directory..."
          mkdir -p /opt/career-study-plan
          cd /opt/career-study-plan
          
          # Clone the GitHub repository
          echo "Cloning repository..."
          if git clone https://github.com/SantiagoGarces16/study-plan.git .; then
            echo "âœ“ Repository cloned successfully"
          else
            echo "ERROR: Failed to clone repository" >&2
            exit 1
          fi
          
          # Verify repository structure
          if [ -f "server/server.js" ] && [ -f "client/index.html" ]; then
            echo "âœ“ Repository structure verified"
          else
            echo "ERROR: Invalid repository structure" >&2
            exit 1
          fi
          
          # Set proper ownership
          chown -R ec2-user:ec2-user /opt/career-study-plan
          
          # Install server dependencies
          echo "Installing server dependencies..."
          cd /opt/career-study-plan/server
          if npm install; then
            echo "âœ“ Server dependencies installed successfully"
          else
            echo "ERROR: Failed to install server dependencies" >&2
            exit 1
          fi
          
          # Create .env file if Gemini API key is provided
          if [ ! -z "${GeminiApiKey}" ]; then
            echo "GEMINI_API_KEY=${GeminiApiKey}" > .env
            echo "âœ“ Gemini API key configured"
          else
            echo "GEMINI_API_KEY=your_api_key_here" > .env
            echo "âœ“ Placeholder .env file created"
          fi
          
          # Start the application with PM2 (set HOME environment variable)
          echo "Starting application with PM2..."
          export HOME=/root
          pm2 start server.js --name "career-plan-server"
          
          # Set up PM2 to start on boot
          pm2 startup systemd -u root --hp /root
          pm2 save
          
          # Verify PM2 is running
          echo "PM2 status:"
          pm2 status
          
          # Configure nginx as reverse proxy
          echo "Configuring nginx for AL2023..."
          
          # Create nginx conf.d directory
          mkdir -p /etc/nginx/conf.d
          
          # Backup original nginx.conf
          cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
          
          # Create a complete nginx configuration that overrides default
          echo "Creating nginx configuration..."
          
          # First, create our site configuration
          cat > /etc/nginx/conf.d/career-plan.conf << 'NGINX_EOF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name _;
              
              # Serve static files from our application
              location / {
                  root /opt/career-study-plan/client;
                  index index.html;
                  try_files $uri $uri/ /index.html;
                  
                  # Security headers
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
              }
              
              # Proxy API requests to Node.js backend
              location /api/ {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
                  
                  # Timeout settings
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Handle favicon and other assets
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                  root /opt/career-study-plan/client;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          NGINX_EOF
          
          # Also modify the main nginx.conf to ensure our config takes precedence
          sed -i '/include \/etc\/nginx\/conf.d\/\*.conf;/a\    # Remove default server block' /etc/nginx/nginx.conf
          
          # Verify nginx configuration was created
          if [ -f /etc/nginx/conf.d/career-plan.conf ]; then
            echo "âœ“ Nginx configuration created successfully"
            echo "Configuration content:"
            cat /etc/nginx/conf.d/career-plan.conf
          else
            echo "ERROR: Failed to create nginx configuration" >&2
            exit 1
          fi
          
          # Verify the client directory exists and has content
          if [ -f /opt/career-study-plan/client/index.html ]; then
            echo "âœ“ Client application files found"
            ls -la /opt/career-study-plan/client/
          else
            echo "ERROR: Client application files not found" >&2
            echo "Directory contents:"
            ls -la /opt/career-study-plan/
            exit 1
          fi
          
          # Fix client API URLs for production (replace localhost:3000 with relative URLs)
          echo "Fixing client API URLs for production..."
          cd /opt/career-study-plan/client
          
          # Replace all localhost:3000 references with relative URLs
          sed -i 's|http://localhost:3000/api/|/api/|g' app.js
          sed -i 's|http://localhost:3000/api/|/api/|g' *.js 2>/dev/null || true
          
          # Verify the changes were made
          if grep -q "localhost:3000" app.js; then
            echo "âš  Warning: Some localhost references may still exist"
            grep -n "localhost:3000" app.js || true
          else
            echo "âœ“ All localhost:3000 references replaced with relative URLs"
          fi
          
          # Remove default nginx configs and backup main config
          rm -f /etc/nginx/conf.d/default.conf
          rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
          rm -f /etc/nginx/sites-available/default 2>/dev/null || true
          cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup
          
          # Disable the default nginx welcome page by removing/renaming default configs
          find /etc/nginx -name "*default*" -type f -exec rm -f {} \; 2>/dev/null || true
          
          # Test nginx configuration
          echo "Testing nginx configuration..."
          nginx -t
          
          # Remove default nginx configuration that might conflict
          rm -f /etc/nginx/conf.d/default.conf
          rm -f /etc/nginx/sites-enabled/default 2>/dev/null || true
          
          # Enable and start nginx
          systemctl enable nginx
          systemctl start nginx
          
          # Verify nginx is running
          echo "Nginx status:"
          systemctl status nginx --no-pager
          
          echo "Amazon Linux 2023 deployment complete! Application should be accessible via HTTP."
          
          # Final verification - wait for services to be ready
          echo "Performing final verification..."
          sleep 15
          
          # Test if Node.js server is responding
          if curl -s --connect-timeout 10 http://localhost:3000/api/plans > /dev/null; then
            echo "âœ“ Backend API is responding"
          else
            echo "âš  Backend API not responding yet - may need more time to start"
          fi
          
          # Test if nginx is serving content
          if curl -s --connect-timeout 10 http://localhost/ > /dev/null; then
            echo "âœ“ Frontend is being served by nginx"
          else
            echo "âš  Frontend not responding - check nginx configuration"
          fi
          
          # Test if nginx proxy is working
          if curl -s --connect-timeout 10 http://localhost/api/plans > /dev/null; then
            echo "âœ“ Nginx proxy is working correctly"
          else
            echo "âš  Nginx proxy not working - API requests may fail"
          fi
          
          # Final verification and logging
          echo "=== AL2023 DEPLOYMENT SUMMARY ===" >> /var/log/deployment.log
          echo "$(date): Career Study Plan deployment completed on Amazon Linux 2023" >> /var/log/deployment.log
          echo "OS Info: $(cat /etc/os-release | grep PRETTY_NAME)" >> /var/log/deployment.log
          echo "Kernel: $(uname -r)" >> /var/log/deployment.log
          echo "Node.js version: $(node --version)" >> /var/log/deployment.log
          echo "npm version: $(npm --version)" >> /var/log/deployment.log
          echo "PM2 version: $(pm2 --version)" >> /var/log/deployment.log
          echo "Nginx version: $(nginx -v 2>&1)" >> /var/log/deployment.log
          echo "" >> /var/log/deployment.log
          
          echo "Service Status:" >> /var/log/deployment.log
          echo "PM2 status:" >> /var/log/deployment.log
          pm2 status >> /var/log/deployment.log 2>&1 || echo "PM2 not running" >> /var/log/deployment.log
          echo "" >> /var/log/deployment.log
          echo "Nginx status:" >> /var/log/deployment.log
          systemctl status nginx --no-pager >> /var/log/deployment.log
          echo "" >> /var/log/deployment.log
          echo "SSM Agent status:" >> /var/log/deployment.log
          systemctl status amazon-ssm-agent --no-pager >> /var/log/deployment.log
          echo "" >> /var/log/deployment.log
          
          # Test application endpoints
          echo "Testing application endpoints..." >> /var/log/deployment.log
          sleep 10
          
          # Test backend API
          if curl -s --connect-timeout 10 http://localhost:3000/api/plans > /dev/null; then
            echo "âœ“ Backend API responding" >> /var/log/deployment.log
          else
            echo "âœ— Backend API test failed" >> /var/log/deployment.log
          fi
          
          # Test frontend
          if curl -s --connect-timeout 10 http://localhost/ > /dev/null; then
            echo "âœ“ Frontend responding" >> /var/log/deployment.log
          else
            echo "âœ— Frontend test failed" >> /var/log/deployment.log
          fi
          
          # Test nginx proxy
          if curl -s --connect-timeout 10 http://localhost/api/plans > /dev/null; then
            echo "âœ“ Nginx proxy working" >> /var/log/deployment.log
          else
            echo "âœ— Nginx proxy test failed" >> /var/log/deployment.log
          fi
          
          echo "=== END AL2023 DEPLOYMENT SUMMARY ===" >> /var/log/deployment.log
          
          # Copy deployment log to application directory
          cp /var/log/deployment.log /opt/career-study-plan/deployment.log
          chown ec2-user:ec2-user /opt/career-study-plan/deployment.log
          
          # Create a simple status script for AL2023
          cat > /opt/career-study-plan/status.sh << 'STATUS_EOF'
          #!/bin/bash
          echo "=== Career Study Plan Status (AL2023) ==="
          echo "Date: $(date)"
          echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
          echo ""
          echo "Services:"
          systemctl is-active nginx && echo "âœ“ Nginx: Running" || echo "âœ— Nginx: Stopped"
          systemctl is-active amazon-ssm-agent && echo "âœ“ SSM Agent: Running" || echo "âœ— SSM Agent: Stopped"
          pm2 status > /dev/null 2>&1 && echo "âœ“ PM2: Running" || echo "âœ— PM2: Stopped"
          echo ""
          echo "Application:"
          curl -s --connect-timeout 5 http://localhost:3000/api/plans > /dev/null && echo "âœ“ Backend API: Responding" || echo "âœ— Backend API: Not responding"
          curl -s --connect-timeout 5 http://localhost/ > /dev/null && echo "âœ“ Frontend: Responding" || echo "âœ— Frontend: Not responding"
          STATUS_EOF
          
          chmod +x /opt/career-study-plan/status.sh
          chown ec2-user:ec2-user /opt/career-study-plan/status.sh
          
          # Create a README for deployment instructions
          cat > /home/ec2-user/README-DEPLOYMENT.md << 'EOF'
          # Career Study Plan - Deployment Complete!
          
          ## Application Status
          
          Your Career Study Plan application has been automatically deployed from:
          https://github.com/SantiagoGarces16/study-plan
          
          ## Access Your Application
          
          - **Application**: http://YOUR_EC2_PUBLIC_IP/
          - **API**: http://YOUR_EC2_PUBLIC_IP/api/
          
          ## Application Management
          
          ```bash
          # Check application status
          pm2 status
          
          # View real-time logs
          pm2 logs career-plan-server
          
          # Restart application
          pm2 restart career-plan-server
          
          # Stop application
          pm2 stop career-plan-server
          
          # Monitor application
          pm2 monit
          ```
          
          ## Update Application
          
          To update to the latest version from GitHub:
          ```bash
          cd /opt/career-study-plan
          sudo git pull origin main
          cd server
          sudo npm install  # If dependencies changed
          pm2 restart career-plan-server
          ```
          
          ## Troubleshooting
          
          - Check nginx status: `sudo systemctl status nginx`
          - Check nginx logs: `sudo tail -f /var/log/nginx/error.log`
          - Check application logs: `pm2 logs career-plan-server`
          - Verify ports: `sudo netstat -tlnp | grep -E '(3000|80)'`
          - Check git repository: `cd /opt/career-study-plan && git status`
          
          ## File Locations
          
          - Application: `/opt/career-study-plan/`
          - Nginx config: `/etc/nginx/conf.d/career-plan.conf`
          - Application logs: `pm2 logs career-plan-server`
          - System logs: `/var/log/messages`
          EOF
          
          chown ec2-user:ec2-user /home/ec2-user/README-DEPLOYMENT.md
          
          # Install CloudWatch agent (optional)
          yum install -y amazon-cloudwatch-agent
          
      Tags:
        - Key: Name
          Value: CareerPlan-WebServer

Outputs:
  PublicIP:
    Description: Public IP address of the web server
    Value: !GetAtt WebServerInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"
      
  PublicDNS:
    Description: Public DNS name of the web server
    Value: !GetAtt WebServerInstance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-PublicDNS"
      
  ApplicationURL:
    Description: URL to access the Career Study Plan application
    Value: !Sub "http://${WebServerInstance.PublicIp}/"
    
  InstanceId:
    Description: EC2 Instance ID for Session Manager connection
    Value: !Ref WebServerInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"
      
  SSHCommand:
    Description: SSH command to connect to the instance (alternative to Session Manager)
    Value: !Sub "ssh -i your-key.pem ec2-user@${WebServerInstance.PublicIp}"
    
  SessionManagerCommand:
    Description: AWS CLI command to connect via Session Manager
    Value: !Sub "aws ssm start-session --target ${WebServerInstance}"
    
  SessionManagerConsoleURL:
    Description: AWS Console URL to connect via Session Manager
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${WebServerInstance}"
    
  DeploymentStatus:
    Description: Deployment status
    Value: "Application automatically deployed from GitHub repository. Ready to use!"
    
  GitRepository:
    Description: Source code repository
    Value: "https://github.com/SantiagoGarces16/study-plan"